# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.worker import Worker
from buildbot.steps.shell import ShellCommand, Compile, Test

import json

WORKER_PASSWORDS = json.load(open('../worker-passwords.json'))
WORKERS = json.load(open('../workers.json'))

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {
    # Project Info
    'title': 'Citra CI',
    'titleURL': 'https://citra-emu.org',
    'buildbotURL': 'http://localhost:8010/',

    # Change sources
    'change_source': [
        changes.GitPoller(
            'git://github.com/spycrab/yuzu.git',
            workdir='yuzu-workdir',
            branch='master',
            pollinterval=300,
            project='yuzu'
        ),
        changes.GitPoller(
            'git://github.com/spycrab/citra.git',
            workdir='citra-workdir',
            branch='master',
            pollinterval=300,
            project='citra'
        )
    ],
    # Builder Config
    'builders' : [],
    # Schedulre config
    'schedulers': [],
    # Worker Config
    'workers': [],
    'protocols': { 'pb': { 'port': 9989 } }   
}

####### WORKERS

for worker in WORKERS:
    c['workers'].append(Worker(worker, WORKER_PASSWORDS[worker]))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

def get_builders(prefix):
    builders = []
    for worker in WORKERS:
        builders.append('{}-{}'.format(prefix, worker))
    return builders

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="citra",
                            change_filter=util.ChangeFilter(project='citra', branch='master'),
                            treeStableTimer=None,
                            builderNames=get_builders('citra-master')))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="yuzu",
                            change_filter=util.ChangeFilter(project='yuzu', branch='master'),
                            treeStableTimer=None,
                            builderNames=get_builders('yuzu-master')))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-citra",
                            builderNames=get_builders('citra-master')))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-yuzu",
                            builderNames=get_builders('yuzu-master')))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def create_generic_factory(repo):
    factory = util.BuildFactory()
    # Check out the source
    factory.addStep(steps.GitHub(repourl=repo, mode='incremental', submodules=True))
    factory.addStep(ShellCommand(command=['mkdir', '-p', 'build'], workdir='build', description='createbuilddir', haltOnFailure=True))
    # configure
    factory.addStep(ShellCommand(command=['cmake', '..'], workdir='build/build', description='configuring', descriptionDone='configure', haltOnFailure=True))
    # build
    factory.addStep(Compile(command=['make', '-j3', 'all'], workdir='build/build', description='building', descriptionDone='build', warningPattern='^Warning: ', haltOnFailure=True))
    # run tests
    factory.addStep(Test(workdir='build/build', description='testing', descriptionDone='test', haltOnFailure=True))
    return factory

def create_linter_factory(repo):
    LINT_SCRIPT = 'https://gists.github.com/...'
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl=repo, mode='incremental', submodules=True))
    factory.addStep(ShellCommand(command=['wget', LINT_SCRIPT, '-O', 'lint.sh'], description='downloading linter', descriptionDone='downloaded linter', haltOnFailure=True))
    factory.addStep(ShellCommand(command=['sh', 'lint.sh'], description='linting', descriptionDone='linted', haltOnFailure=True))

for worker in WORKERS:
    c['builders'].append(util.BuilderConfig(
        name='yuzu-master-{}'.format(worker),
        workernames=[worker],
        factory=create_generic_factory('git://github.com/yuzu-emu/yuzu.git')))
    c['builders'].append(util.BuilderConfig(
        name='citra-master-{}'.format(worker),
        workernames=[worker],
        factory=create_generic_factory('git://github.com/citra-emu/citra.git')))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# minimalistic config to activate new web UI
c['www'] = dict(port=8010, change_hook_dialects = {'github': {}},
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
